every ExistsA is:
every ExistsB is:
every CircularA (a CircularB) is:
every CircularB (a CircularA) is:
every SelfInheriting (a SelfInheriting) is:
every ExtendsNonExist (a NonExist) is:
every ExtendsTwoClasses (a ExistsA, a ExistsB) is:
every ExtendsClassTwice (capable ExistsA, capable ExistsA) is:

every MethodErrorsHere is:
	provides
		NonExist,
		ExistsA <- NonExist,
		ExistsB <- ExistsA(NonExist);

	NonExist -- returnTypeDoesntExist() {}

	#>
	# A block comment!
	##
	doMethodWith(NonExist) {}

	// a dangling block comment end
	##
	doMethodWith(ExistsA, ExistsB) {}

	doMethodWith(ExistsA, ExistsB) {}

	doXMethodWith(ExistsA, ExistsB) {
		5 * "test";
	}

	ExistsB -- do1(ExistsA[][]) {
		5;
		return ExistsA;
	}

	ExistsB -- do1(ExistsA -- fn(ExistsB, ExistsA, ExistsA -- fn()) @mfn) {
		@mfn = 5;
	}
