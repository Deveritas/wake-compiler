every ExistsA is:
every ExistsB is:
every CircularA (a CircularB) is:
every CircularB (a CircularA) is:
every SelfInheriting (a SelfInheriting) is:
every ExtendsNonExist (a NonExist) is:
every ExtendsTwoClasses (a ExistsA, a ExistsB) is:
every ExtendsClassTwice (capable ExistsA, capable ExistsA) is:

every MethodErrorsHere is:
	provides
		NonExist,
		ExistsA <- NonExist,
		ExistsB <- ExistsA(NonExist);

	NonExist -- returnTypeDoesntExist() {}

	doMethodWith(NonExist) {}

	doMethodWith(ExistsA, ExistsB) {}

	doMethodWith(ExistsA, ExistsB) {}

	doMethodWith(ExistsA, ExistsB) {
		//ExistsA;
		//5 * 5;
		//5 * "test";
		return 5 + ( 5 + ( 5 + ("test" * 5) / 4 ) * 6) + "test";
		//5 + @nonexist;
	}
