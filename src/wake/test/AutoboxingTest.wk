import Asserts;

every AutoboxingTest is:

	testNumSquared(Asserts) {
		Asserts.that(5.squared())Equals(25);
	}

	testAbsoluteValue(Asserts) {
		Asserts.that(5.abs())Equals(5);
		Asserts.that(0.abs())Equals(0);
		Asserts.that(-3.abs())Equals(3);
		// TODO...NEGATIVES
	}

	testMaxOfNum(Asserts) {
		Asserts.that(5.orMaxOf(5))Equals(5);
		Asserts.that(5.orMaxOf(4))Equals(5);
		Asserts.that(5.orMaxOf(6))Equals(6);
	}

	testMaxOfNums(Asserts) {
		var Num[] = [];
		Num[0] = 5;
		Asserts.that(5.orMaxOf(Num))Equals(5);
		Num[1] = 4;
		Asserts.that(5.orMaxOf(Num))Equals(5);
		Num[2] = 6;
		Asserts.that(5.orMaxOf(Num))Equals(6);
	}

	testMinOfNum(Asserts) {
		Asserts.that(5.orMinOf(5))Equals(5);
		Asserts.that(5.orMinOf(4))Equals(4);
		Asserts.that(5.orMinOf(6))Equals(5);
	}

	testMinOfNums(Asserts) {
		var Num[] = [];
		Num[0] = 5;
		Asserts.that(5.orMinOf(Num))Equals(5);
		Num[1] = 4;
		Asserts.that(5.orMinOf(Num))Equals(4);
		Num[2] = 6;
		Asserts.that(5.orMinOf(Num))Equals(4);
	}

	testNumberOfDigits(Asserts) {
		Asserts.that(123.numberOfDigits())Equals(3);
		Asserts.that(1234.numberOfDigits())Equals(4);
		Asserts.that(12.numberOfDigits())Equals(2);
		Asserts.that(1.numberOfDigits())Equals(1);
		Asserts.that(0.numberOfDigits())Equals(1);
	}

	testToUpper(Asserts) {
		Asserts.that("blah".toUpper())Equals("BLAH");
	}

	testToLower(Asserts) {
		Asserts.that("BLAH".toLower())Equals("blah");
	}

	testSwitchCase(Asserts) {
		Asserts.that("BlAh".switchCase())Equals("bLaH");
	}

	testTrim(Asserts) {
		Asserts.that("    	 blah".trim())Equals("blah");
		Asserts.that(" blah".trim())Equals("blah");
		Asserts.that("blah ".trim())Equals("blah");
		Asserts.that("blah 		".trim())Equals("blah");
		Asserts.that(" blah ".trim())Equals("blah");
		Asserts.that("  	 blah 		 ".trim())Equals("blah");
		Asserts.that("blah".trim())Equals("blah");
		Asserts.that(" blah blah ".trim())Equals("blah blah");
		Asserts.that("blah blah".trim())Equals("blah blah");
	}

	testArraySize(Asserts) {
		var Num[] = [];
		Asserts.that(Num.getSize())Equals(0);
		Num[0] = 1;
		Asserts.that(Num.getSize())Equals(1);
		Num[1] = 1;
		Asserts.that(Num.getSize())Equals(2);
	}

	testArrayContains(Asserts) {
		var Num[] = [];
		var Text[] = [];
		var AutoboxingTest[] = [];
		Asserts.isFalse(Num.contains(5));
		Asserts.isFalse(Text.contains("test"));
		Asserts.isFalse(AutoboxingTest.contains(this));
		Num[0] = 4;
		Text[0] = "hey";
		Asserts.isFalse(Num.contains(5));
		Asserts.isFalse(Text.contains("test"));
		Asserts.isFalse(AutoboxingTest.contains(this));
		Num[1] = 5;
		Text[1] = "test";
		AutoboxingTest[0] = this;
		Asserts.isTrue(Num.contains(5));
		Asserts.isTrue(Text.contains("test"));
		Asserts.isTrue(AutoboxingTest.contains(this));
	}

	testTextLength(Asserts) {
		Asserts.that("hello".getSize())Equals(5);
		Asserts.that("h".getSize())Equals(1);
		Asserts.that("".getSize())Equals(0);
		Asserts.that("suuuuuuuuuuuuuuuuuupa coooooooooooooooooool".getSize())Equals(43);
	}

	testTextSubstr(Asserts) {
		Asserts.that("hello".substr(0))Equals("hello");
		Asserts.that("hello".substr(0, 10))Equals("hello");
		Asserts.that("hello".substr(1))Equals("ello");
		Asserts.that("hello".substr(1, 10))Equals("ello");
		Asserts.that("hello".substr(1, 3))Equals("ell");
	}

	testNumToString(Asserts) {
		Asserts.that(5.toString())Equals("5");
		Asserts.that(0.toString())Equals("0");
		Asserts.that(2020.toString())Equals("2020");
		Asserts.that(-2020.toString())Equals("-2020");
	}

	testBoolToString(Asserts) {
		Asserts.that(true.toString())Equals("true");
		Asserts.that(false.toString())Equals("false");
	}

	testFloor(Asserts) {
		Asserts.that(5.5.floor())Equals(5);
		Asserts.that(5.1.floor())Equals(5);
		Asserts.that(5.9.floor())Equals(5);
		Asserts.that(5.0.floor())Equals(5);
		Asserts.that((0 - 5).floor())Equals(-5);
		Asserts.that((0 - 5.1).floor())Equals(-6);
		Asserts.that((0 - 5.5).floor())Equals(-6);
		Asserts.that((0 - 5.9).floor())Equals(-6);
	}

	testCeil(Asserts) {
		Asserts.that(5.5.ceil())Equals(6);
		Asserts.that(5.1.ceil())Equals(6);
		Asserts.that(5.9.ceil())Equals(6);
		Asserts.that(5.0.ceil())Equals(5);
		Asserts.that(-5.ceil())Equals(-5);
		Asserts.that(-5.1.ceil())Equals(-5);
		Asserts.that(-5.5.ceil())Equals(-5);
		Asserts.that(-5.9.ceil())Equals(-5);
	}

	testRound(Asserts) {
		Asserts.that(5.5.round())Equals(6);
		Asserts.that(5.51.round())Equals(6);
		Asserts.that(5.1.round())Equals(5);
		Asserts.that(5.9.round())Equals(6);
		Asserts.that(5.0.round())Equals(5);
		Asserts.that(-5.round())Equals(-5);
		Asserts.that(-5.1.round())Equals(-5);
		Asserts.that(-5.5.round())Equals(-5);
		Asserts.that(-5.51.round())Equals(-6);
		Asserts.that(-5.9.round())Equals(-6);
	}

	testModulo(Asserts) {
		Asserts.that(5.modulo(2))Equals(1);
		Asserts.that(10.modulo(2))Equals(0);
		Asserts.that(10.modulo(3))Equals(1);
		Asserts.that(11.modulo(3))Equals(2);
		Asserts.that(12.modulo(3))Equals(0);
	}

	testParseNum(Asserts) {
		it(Asserts)That("5".parseNum())ExistsAndEquals(5);
		it(Asserts)That("54".parseNum())ExistsAndEquals(54);
		it(Asserts)That("54.5".parseNum())ExistsAndEquals(54.5);
		it(Asserts)That("-54.5".parseNum())ExistsAndEquals(-54.5);
		var Num? = "-5o".parseNum();
		if Num exists {
			Asserts.fail("-5o should not have parsed.");
		}
	}

	it(Asserts)That(Num?)ExistsAndEquals($Num) {
		if Num exists {
			Asserts.that(Num)Equals($Num);
		} else {
			Asserts.fail("Num should have equaled" + $Num.toString() + ", but didn't exist.");
		}
	}
