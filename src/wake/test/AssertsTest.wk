import Printer;

import Asserts;
import MockPrinter;

#>
# Test our asserts object, with manually
# printed and returned errors.
##
every AssertsTest is:

	provides Printer <- MockPrinter, Asserts, MockPrinter;

	needs Printer;

	Bool -- testAssertTextMatches() {
		var Asserts <- this;
		Asserts.that("abcdefg aha!")Equals("abcdefg aha!");
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that text is equal to itself");
		return false;
	}

	Bool -- testAssertTextNotMatches() {
		var Asserts <- this;
		Asserts.that("George Bush")Equals("Barack Obama");

		if(Asserts.haveFailed()) {
			if(Asserts.getLastText() == "Failed asserting that Barack Obama is equal to actual George Bush") return true;

			Printer.printLine("Incorrect failure text!");
			Printer.printLine("Real text is " + Asserts.getLastText());
			return false;
		}

		Printer.printLine("Failed asserting that different text is different");
		return false;
	}

	Bool -- testAssertIntMatches() {
		var Asserts <- this;
		Asserts.that(10)Equals(10);
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that ints are equal to themselves");
		return false;
	}

	Bool -- testAssertIntNotMatches() {
		var Asserts <- this;
		Asserts.that(45)Equals(54);

		if(Asserts.haveFailed()) return true;

		Printer.printLine("Failed asserting that different 54 and 45 are different");
		return false;
	}

	Bool -- testAssertTrueMatches() {
		var Asserts <- this;
		Asserts.that(true)Equals(true);
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that true that true");
		return false;
	}

	Bool -- testAssertTrueNotMatches() {
		var Asserts <- this;
		Asserts.that(true)Equals(false);

		if(Asserts.haveFailed()) {
			if(Asserts.getLastText() == "Failed asserting that false is equal to actual true") return true;

			Printer.printLine("Incorrect failure text!");
			Printer.printLine("Real text is " + Asserts.getLastText());
			return false;
		}

		Printer.printLine("Failed asserting that false is not equal to true");
		return false;
	}

	Bool -- testAssertFalseMatches() {
		var Asserts <- this;
		Asserts.that(false)Equals(false);
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that false that false");
		return false;
	}

	Bool -- testAssertFalseNotMatches() {
		var Asserts <- this;
		Asserts.that(false)Equals(true);

		if(Asserts.haveFailed()) {
			if(Asserts.getLastText() == "Failed asserting that true is equal to actual false") return true;

			Printer.printLine("Incorrect failure text!");
			Printer.printLine("Real text is " + Asserts.getLastText());
			return false;
		}

		Printer.printLine("Failed asserting that true is not equal to false");
		return false;
	}

	Bool -- testAssertTrue() {
		var Asserts <- this;
		Asserts.isTrue(true);
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that true is true");
		return false;
	}

	Bool -- testAssertNotTrue() {
		var Asserts <- this;
		Asserts.isTrue(false);

		if(Asserts.haveFailed()) {
			if(Asserts.getLastText() == "Failed asserting that true is equal to actual false") return true;

			Printer.printLine("Incorrect failure text!");
			Printer.printLine("Real text is " + Asserts.getLastText());
			return false;
		}

		Printer.printLine("Failed asserting that false is not true");
		return false;
	}

	Bool -- testAssertFalse() {
		var Asserts <- this;
		Asserts.isFalse(false);
		if(!Asserts.haveFailed()) return true;
		Printer.printLine("Failed asserting that false is false");
		return false;
	}

	Bool -- testAssertNotFalse() {
		var Asserts <- this;
		Asserts.isFalse(true);

		if(Asserts.haveFailed()) {
			if(Asserts.getLastText() == "Failed asserting that false is equal to actual true") return true;

			Printer.printLine("Incorrect failure text!");
			Printer.printLine("Real text is " + Asserts.getLastText());
			return false;
		}

		Printer.printLine("Failed asserting that true is not false");
		return false;
	}
