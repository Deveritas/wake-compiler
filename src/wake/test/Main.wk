import Printer;
import System;

import Asserts;
import AssertsTest;
import MathTest;
import BooleanLogicTest;
import InheritanceTest;
import ArrayTest;
import OptionalTypeTest;
import AssignmentsTest;
import PropertyTest;
import AutoboxingTest;

#>
# Test suite entry point
##
every Main is:

	needs System, AssertsTest, Printer, MathTest, BooleanLogicTest, InheritanceTest, ArrayTest, OptionalTypeTest, AssignmentsTest, PropertyTest, AutoboxingTest;

	provides Printer, Asserts;

	with Bool passed = true;
	with Int totalcount = 0;
	with Int failedcount = 0;
	with Int passedcount = 0;
	with Text[] failed `tests by name` = [];

	Run(Bool result, test Text) {
		totalcount += 1;
		if(!result) {
			failed[failedcount] = test;
			failedcount += 1;
			passed = false;
			Printer.print("F");
		} else {
			Printer.print(".");
			passedcount += 1;
		}
	}

	Main() {
		Run(AssertsTest.~[test assert text matches]~(), "test assert text matches");
		Run(AssertsTest.~[test assert text not matches]~(), "test assert text not matches");
		Run(AssertsTest.~[test assert int matches]~(), "test assert int matches");
		Run(AssertsTest.~[test assert int not matches]~(), "test assert int not matches");
		Run(AssertsTest.~[test assert true matches]~(), "test assert true matches");
		Run(AssertsTest.~[test assert true not matches]~(), "test assert true not matches");
		Run(AssertsTest.~[test assert false matches]~(), "test assert false matches");
		Run(AssertsTest.~[test assert false not matches]~(), "test assert false not matches");
		Run(AssertsTest.~[test assert true]~(), "test assert true");
		Run(AssertsTest.~[test assert not true]~(), "test assert not true");
		Run(AssertsTest.~[test assert false]~(), "test assert false");
		Run(AssertsTest.~[test assert not false]~(), "test assert not false");
		Run(MathTest.testAddition(Asserts <- this), "testAddition");
		Run(MathTest.testSubtraction(Asserts <- this), "testSubtraction");
		Run(MathTest.testDivision(Asserts <- this), "testDivision");
		Run(MathTest.testMultiplication(Asserts <- this), "testMultiplication");
		Run(MathTest.testOrderOfOperations(Asserts <- this), "testOrderOfOperations");
		Run(BooleanLogicTest.testOr(Asserts <- this), "testOr");
		Run(BooleanLogicTest.testAnd(Asserts <- this), "testAnd");
		Run(BooleanLogicTest.testOrderOfOperations(Asserts <- this), "testOrderOfOperations");
		//Run(TernaryOperatorTest.testTrue(Asserts <- this));
		//Run(TernaryOperatorTest.testFalse(Asserts <- this));
		Run(InheritanceTest.~[test parent gets parent class name]~(Asserts <- this), "test parentgets parent classname");
		Run(InheritanceTest.~[test override child gets child class name]~(Asserts <- this), "test override child gets child classname");
		Run(InheritanceTest.~[test override child from provider gets child class name]~(Asserts <- this), "test ovveride child from provider gets child class name");
		Run(InheritanceTest.~[test override child after cast gets child class name]~(Asserts <- this), "test override child after cast gets child classname");
		Run(InheritanceTest.~[test fallthrough child gets child class name]~(Asserts <- this ), "test fallthrough child gets child classname");
		Run(InheritanceTest.~[test fallthrough child from provider gets child class name]~(Asserts <- this ), "test fallthrough child from provider gets child class name");
		Run(InheritanceTest.~[test fallthrough child after cast gets child class name]~(Asserts <- this ), "test fallthrough child after cast gets child classname");
		Run(InheritanceTest.~[test implementing child gets child class name]~(Asserts <- this ), "test implementing child gets child class name");
		Run(InheritanceTest.~[test implementing child from provider gets child class name]~(Asserts <- this ), "test implementing child from proider gets child class name");
		Run(InheritanceTest.~[test implementing child after cast gets child class name]~(Asserts <- this ), "test implementing child after cast gets child class name");
		Run(ArrayTest.~[test set array index]~(Asserts <- this), "test set array index");
		Run(ArrayTest.~[test reset array index]~(Asserts <- this), "test reset array index");
		Run(ArrayTest.~[test set array array index index]~(Asserts <- this), "test set array array index index");
		Run(ArrayTest.~[test reset array array index index]~(Asserts <- this), "tset reset array array index index");
		Run(ArrayTest.~[test set multiple array indices]~(Asserts <- this), "test set multiple array indices");
		Run(ArrayTest.~[test set multiple array array indices indices]~(Asserts <- this), "test set multiple array array indices indices");
		Run(OptionalTypeTest.~[test optional int never set]~(), "test optional int never set");
		Run(OptionalTypeTest.~[test optional int set]~(), "teest optional int set");
		Run(OptionalTypeTest.~[test optional int not set will hit else]~(), "test optional int not set will hit else");
		Run(OptionalTypeTest.~[test optional int set wont hit else]~(), "test optional int set wont hit else");
		Run(AssignmentsTest.testPlusEquals(Asserts <- this), "testPlusEquals");
		Run(AssignmentsTest.testMinusEquals(Asserts <- this), "testMinusEquals");
		Run(AssignmentsTest.testTimesEquals(Asserts <- this), "testTimesEquals");
		Run(AssignmentsTest.testDivideEquals(Asserts <- this), "testDivideEquals");
		Run(AssignmentsTest.testUsingAssigmentReturnValues(Asserts <- this), "testUsingAssigmentReturnValues");
		Run(PropertyTest.~[test own properties]~(Asserts <- this), "test own properties");
		Run(PropertyTest.~[test others properties]~(Asserts <- this), "test others properties");
		Run(AutoboxingTest.testIntSquared(Asserts <- this), "testIntSquared");
		Run(AutoboxingTest.testAbsoluteValue(Asserts <- this), "testAbsoluteValue");
		Run(AutoboxingTest.testMaxOfInt(Asserts <- this), "testMaxOfInt");
		Run(AutoboxingTest.testMaxOfInts(Asserts <- this), "testMaxOfInts");
		Run(AutoboxingTest.testMinOfInt(Asserts <- this), "testMinOfInt");
		Run(AutoboxingTest.testMinOfInts(Asserts <- this), "testMinOfInts");
		Run(AutoboxingTest.testNumberOfDigits(Asserts <- this), "testNumberOfDigits");
		Run(AutoboxingTest.testToUpper(Asserts <- this), "testToUpper");
		Run(AutoboxingTest.testToLower(Asserts <- this), "testToLower");
		Run(AutoboxingTest.testSwitchCase(Asserts <- this), "testSwitchCase");
		Run(AutoboxingTest.testTrim(Asserts <- this), "testSwitchCase");

		Printer.printLine("");
		Printer.printLine("");
		Printer.print("TOTAL:  ");
		Printer.printLine(totalcount);
		Printer.print("PASSED: ");
		Printer.printLine(passedcount);
		Printer.print("FAILED: ");
		Printer.printLine(failedcount);

		if(passed) System.exit(0);
		Printer.printLine("FAILURES:");

		var Int = 0;
		while(Int < failedcount) {
			Printer.printLine(failed[Int]);
			Int += 1;
		}

		System.exit(1);
	}

#>
every TernaryOperatorTest is:

	Bool -- testTrue() {
		return true ? true : false;
	}

	Bool -- testFalse() {
		return false ? false : true;
	}
##
