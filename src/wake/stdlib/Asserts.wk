import Printer;

#>
# This takes assertions and prints failures, and then reports
# at test end if something went wrong. At that point it should
# be discarded and you should use a new one.
##
every Asserts is:

	needs Printer;

	with Bool hasfailed = false;
	with Text lasttext = "";

	that(actual Bool)Equals(Bool) {
		if(Bool != actual) {
			lasttext = "Failed asserting that ";
			if(Bool) lasttext = lasttext + "true is equal to actual false";
			else lasttext = lasttext + "false is equal to actual true";
			Printer.printLine(lasttext);
			hasfailed = true;
		}
	}

	isFalse(Bool) {
		that(Bool)Equals(false);
	}

	isTrue(Bool) {
		that(Bool)Equals(true);
	}

	that(actual Int)Equals(Int) {
		if(Int != actual) {
			lasttext = "Failed asserting that two numbers are equal" ;
			Printer.printLine(lasttext);
			Printer.printLine(Int);
			Printer.printLine(actual);
			hasfailed = true;
		}
	}

	that(actual Text)Equals(Text) {
		if(Text != actual) {
			lasttext = "Failed asserting that " + Text + " is equal to actual " + actual;
			Printer.printLine(lasttext);
			hasfailed = true;
		}
	}

	#>
	# This is only for until we can provide and then
	# watch an ErrorCounter instance.
	##
	Bool -- haveFailed() {
		return hasfailed;
	}

	#>
	# This is only for until we can provide and then
	# watch an ErrorCounter instance.
	##
	Bool -- allPassed() {
		return !hasfailed;
	}

	#>
	# This will only exist until MockPrinter can be
	# watched after being provided.
	##
	Text -- getLastText() {
		return lasttext;
	}
