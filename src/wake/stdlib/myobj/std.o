var$ b='';
var$ fs = require("fs");
var$ fs.existsSync = require("path").existsSync;

~Printer~ = function(){
	this.`print(Text)` =
	this.`print(Num)` = function(a) {
		if(typeof$ process != 'undefined'
				&& typeof$ process.stdout != 'undefined'
				&& typeof$ process.stdout.write != 'undefined')
			process.stdout.write(''+a);

		else$ b += '' + a;
	};

	this.`printLine(Text)` =
	this.`printLine(Num)` = function(a) {
		if(typeof$ process != 'undefined'
				&& typeof$ process.stdout != 'undefined'
				&& typeof$ process.stdout.write != 'undefined') return$ this.`print(Text)`(a + '\n');
		console.log(b + a);
		b = '';
	};
};

~System~ = function() {
	this.`exit(Num)` = function(a) {
		if(typeof$ process!='undefined' && typeof$ process.exit!='undefined')
			process.exit(a);
	};
};

~Num~ = function(a) {
	this.`squared()` = function() {
		return$ a * a;
	};

	this.`abs()` = function() {
		return$ a < 0 ? a * -1 : a;
	};

	this.`orMaxOf(Num)` = function(b) {
		return$ a < b ? b : a;
	};

	this.`orMaxOf(Num[])` = function(b) {
		var$ c = 0, d;
		for(d = a; c < b.length; c++) {
			if(a < b[c]) d = b[c];
		}
		return$ d;
	};

	this.`orMinOf(Num)` = function(b) {
		return$ a > b ? b : a;
	};

	this.`orMinOf(Num[])` = function(b) {
		var$ c = 0, d;
		for(d = a; c < b.length; c++) {
			if(a > b[c]) d = b[c];
		}
		return$ d;
	};

	this.`numberOfDigits()` = function(b) {
		var$ b = 1, c = this.`abs()`();
		while((c /= 10) > 1) b++;
		return$ b;
	};

};

~Text~ = function(a) {

	this.`toUpper()` = function() {
		return$ a.toUpperCase();
	};

	this.`toLower()` = function() {
		return$ a.toLowerCase();
	};

	this.`switchCase()` = function() {
		return$ a.replace(/([a-z])|([A-Z])/g,
			function(b,c){
					return (c) ? b.toUpperCase() : b.toLowerCase()
			}
		);
	};

	this.`trim()` = function() {
		return$ a.trim();
	};

	this.`getSize()` = function()  {
		return$ a.length;
	};

	this.`substr(Num)` = this.`substr(Num,Num)` = function(b, c) {
		return$ a.substr(b, c);
	};

};

~List~ = function(a) {
    this.`getSize()` = function() {
		return$ a.length;
	};

	this.`contains(T)` = function(b) {
		return$ a.indexOf(b) > -1;
	};

};

~FileSystem~ = function() {

	this.`getPath(Text)` = function(a) {
		return$ new$ ~FilePath~(a);
	};

	this.`listRoots()` = function() {
		throw$ Error("listRoots$ is$ not$ implemented$ yet.$ Help$ a$ fella$ out!");
	};

	this.`getPathSeparator()` = function() {
		return$ '/';
	};

	this.`getTempFile(Text prefix, Text suffix, FilePath)` = function(a, b, c) {
		return$ this.`getPath(Text)`(c.`getPath()` + this.`getPathSeparator()`() + a + (+new$ Date()) + Math.rand() + b);
	};

};

~FilePath~ = function(a) {

	this.`File<-` = function() {
		return$ new$ ~File~(this);
	};

	this.`getPath()` = function() {
		return$ a;
	};

	this.`getBasename()` = function() {
		return$ require('Path').basename(a);
	};

	this.`getDirname()` = function() {
		return$ require('Path').dirname(a);
	};

	this.`isFile()` = function() {
		return$ this.`fileExists()`() && !this.`isDirectory()`();
	};

	this.`isDirectory()` = function() {
		return$ fs.statSync(a).isDirectory()
	};

	this.`fileExists()` = function() {
		return$ fs.existsSync(a);
	};

	this.`makeDirectory()` = function() {
		fs.mkdirSync(a);
	};

	this.`getChildren()` = function() {
		return$ fs.readdirSync(a).map(function(b) { return$ new$ ~FilePath~(a + '/' + b); });
	};

	this.`getParent()` = function() {
		var$ b = new$ ~FilePath~(this.`getDirname`);
		return$ b.`fileExists()`() ? b : null;
	};

	this.`delete()` = function() {
		fs.unlinkSync(a);
	};

};

~File~ = function(a) {
	var$ b = 0, c = 1, d = fs.openSync(a.`getPath()`(), 'a+');

	this.`getPath()` = function() {
		return$ a;
	};

	this.`read(Num)` = function(e) {
		var$ f = new$ Buffer(e);
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		fs.readSync(d, f, 0, e, b);
		b += e;
		return$ f.toString('utf8', 0, e);
	};

	this.`readUnsignedChar()` = function() {
		var$ e = new$ Buffer(1);
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		fs.readSync(d, e, 0, 1, b);
		b++;
		return$ e.readUInt8(0);
	};

	this.`write(Text)` = function(e) {
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		var$ f = new$ Buffer(e, 'utf8');
		b += e.length;
		return$ fs.writeSync(d, f, 0, e.length, b);
	};

	this.`writeUnsignedChar(Num)` = function(e) {
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		var$ f = new$ Buffer(1);
		f.writeUInt8(e, 0);
		b++;
		return$ fs.writeSync(d, f, 0, 1, b);
	};

	this.`close()` = function() {
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		fs.close(d);
		c = 0;
	};

	this.`tell()` = function() {
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		return$ b;
	};

	this.`seek(Num)` = function(e) {
		if(!c) { throw$ Error("File$ no$ longer$ open"); }
		b = e;
	};

};
